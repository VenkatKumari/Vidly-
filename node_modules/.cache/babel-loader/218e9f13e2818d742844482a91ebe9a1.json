{"ast":null,"code":"var _jsxFileName = \"/home/viks/Documents/Vidly-/src/components/movieForm.jsx\";\nimport React, { Component } from \"react\";\nimport Form from \"./common/form\";\nimport Joi from \"joi-browser\";\nimport { getMovie, saveMovie } from \"../services/movieService\";\nimport { getGenres } from \"../services/genreService\";\n\nclass MovieForm extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        title: \"\",\n        genreId: \"\",\n        numberInStock: \"\",\n        dailyRentalRate: \"\"\n      },\n      genres: [],\n      errors: {}\n    };\n    this.schema = {\n      _id: Joi.string(),\n      title: Joi.string().required().label(\"Title\"),\n      genreId: Joi.string().required().label(\"Genre\"),\n      numberInStock: Joi.number().required().min(0).max(100).label(\"Number in Stock\"),\n      dailyRentalRate: Joi.number().required().min(0).max(10).label(\"Daily rental Rate\")\n    };\n\n    this.doSubmit = () => {\n      console.log(\"submitted\");\n      const result = saveMovie(this.state.data);\n      console.log(result);\n      this.props.history.push(\"/movies\");\n    };\n  }\n\n  async populateGenres() {\n    const {\n      data: genres\n    } = await getGenres();\n    this.setState({\n      genres\n    });\n  }\n\n  async populateMovie() {\n    const movieId = this.props.match.params.id;\n    if (movieId === \"new\") return;\n  }\n\n  async componentDidMount() {\n    await this.populateGenres();\n    await this.populateMovie();\n\n    try {\n      const {\n        data: movie\n      } = await getMovie(movieId);\n      this.setState({\n        data: this.mapToViewModel(movie)\n      });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404) this.props.history.replace(\"/not-found\");\n    }\n  }\n\n  mapToViewModel(movie) {\n    return {\n      _id: movie._id,\n      title: movie.title,\n      genreId: movie.genre._id,\n      numberInStock: movie.numberInStock,\n      dailyRentalRate: movie.dailyRentalRate\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"Movie Form\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, this.renderInput(\"title\", \"Title\"), this.renderSelect(\"genreId\", \"Genre\", this.state.genres), this.renderInput(\"numberInStock\", \"Number in stock\", \"number\"), this.renderInput(\"dailyRentalRate\", \"Rate\"), this.renderButton(\"Save\")));\n  }\n\n}\n\nexport default MovieForm;","map":{"version":3,"sources":["/home/viks/Documents/Vidly-/src/components/movieForm.jsx"],"names":["React","Component","Form","Joi","getMovie","saveMovie","getGenres","MovieForm","state","data","title","genreId","numberInStock","dailyRentalRate","genres","errors","schema","_id","string","required","label","number","min","max","doSubmit","console","log","result","props","history","push","populateGenres","setState","populateMovie","movieId","match","params","id","componentDidMount","movie","mapToViewModel","ex","response","status","replace","genre","render","handleSubmit","renderInput","renderSelect","renderButton"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Form from \"./common/form\";\nimport Joi from \"joi-browser\";\nimport { getMovie, saveMovie } from \"../services/movieService\";\nimport { getGenres } from \"../services/genreService\";\n\nclass MovieForm extends Form {\n  state = {\n    data: { title: \"\", genreId: \"\", numberInStock: \"\", dailyRentalRate: \"\" },\n    genres: [],\n    errors: {},\n  };\n\n  schema = {\n    _id: Joi.string(),\n    title: Joi.string().required().label(\"Title\"),\n    genreId: Joi.string().required().label(\"Genre\"),\n    numberInStock: Joi.number()\n      .required()\n      .min(0)\n      .max(100)\n      .label(\"Number in Stock\"),\n    dailyRentalRate: Joi.number()\n      .required()\n      .min(0)\n      .max(10)\n      .label(\"Daily rental Rate\"),\n  };\n\n  async populateGenres() {\n    const { data: genres } = await getGenres();\n    this.setState({ genres });\n  }\n\n  async populateMovie() {\n    const movieId = this.props.match.params.id;\n    if (movieId === \"new\") return;\n  }\n\n  async componentDidMount() {\n    await this.populateGenres();\n    await this.populateMovie();\n\n    try {\n      const { data: movie } = await getMovie(movieId);\n      this.setState({ data: this.mapToViewModel(movie) });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404)\n        this.props.history.replace(\"/not-found\");\n    }\n  }\n\n  mapToViewModel(movie) {\n    return {\n      _id: movie._id,\n      title: movie.title,\n      genreId: movie.genre._id,\n      numberInStock: movie.numberInStock,\n      dailyRentalRate: movie.dailyRentalRate,\n    };\n  }\n\n  doSubmit = () => {\n    console.log(\"submitted\");\n    const result = saveMovie(this.state.data);\n    console.log(result);\n    this.props.history.push(\"/movies\");\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Movie Form</h1>\n        <form onSubmit={this.handleSubmit}>\n          {this.renderInput(\"title\", \"Title\")}\n          {this.renderSelect(\"genreId\", \"Genre\", this.state.genres)}\n          {this.renderInput(\"numberInStock\", \"Number in stock\", \"number\")}\n          {this.renderInput(\"dailyRentalRate\", \"Rate\")}\n          {this.renderButton(\"Save\")}\n        </form>\n      </div>\n    );\n  }\n}\nexport default MovieForm;\n"]},"metadata":{},"sourceType":"module"}